#1 쿠버네티스 개념
- 컨테이너 동작을 위해 시스템에 도커를 설치해야함.
- 하이퍼바이저로 하드웨어 리소스를 가상화해서 VM 생성 가능.
- 하이퍼바이저가 사실상 호스트OS.
- 컨테이너 플랫폼은 베어메탈-호스트OS-도커-컨테이너 구조
- 컨테이너는 게스트OS가 없으므로 가벼워서 스케일인-아웃에 용이. 즉, 배포에 용이.
- 규모가 큰 기업에서는 안정적 서비스 배포를 위해 수많은 컨테이너 사용, 수많은 컨테이너 관리를 위해 오케스트레이션 도구인 쿠버네티스가 필요.
- 쿠버네티스는 마스터, 워커 노드로 구성됨. 마스터에서 각 컨테이너를 적절한 워커들로 분산하여 배치 및 관리함. 
- 기술스택 계층 : 베어메탈-인프라(OpenStack)-OS-Container Engine(Docker)-Ochestration Service(K8S)
- 선언적 API는 사용자가 컨트롤플레인에 명령을 하면 자동으로 컨테이너를 관리해주는 관리의 편의성을 뜻함.

#2 쿠버네티스 설치
- CNI란 컨테이너 네트워크 인터페이스로, 파드 네트워크라고도 함. K8S 구성에서 노드 간 통신은 네트워크가 연결되어있으므로 가능, 컨테이너는 각 IP를 가지고 동작하는데 컨테이너 간 통신이 가능해야함. 이를 지원하는게 CNI이며 다양한 플러그인으로 설치하게됨. (플라넬, 칼리코, 위브넷, 큐브라우터 등) 컨테이너 - CNI - 물리네트워크 - CNI - 컨테이너 흐름으로 통신.
- 워커노드는 실제 컨테이너를 동작시킴.
- 구성 환경은 Windows OS - VirtualBox Hypervisor - VM(컨트롤플레인, 워커노드, 워커노드)
- Ubuntu 20.04 LTS, master 192.168.137.10, worker1 192.168.137.20, worker2 192.168.137.30
- 쿠버네티스 구성
	1. 모든 시스템에 Docker 설치
	2. kubernetes 설치
- kubeadm : 쿠버네티스를 관리 및 운영해주는 커맨드
- kubelet : 쿠버네티스 컨테이너 동작 및 마스터와 통신 데몬
- kubectl : 컨테이너 생성하는 커맨드
- kubeadm을 통해 클러스터 생성함. "kubeadm init" 커맨드를 master 에서만 실행하여 클러스터 생성. master에 API, controller, schduler, etcd, coreDNS가 구성됨.
- master 준비 완료 후 worker를 join 시켜야함. join 시킨 후 master에서 get nodes 하면 그제서야 master, worker1, worker2 모두 확인됨.

#3 kubectl
kubectl 명령어를 사용하려면 kubectl을 설치해야함.
kubectl은 사용자가 master에게 명령을 내리는 명령어.

#7 클러스터의 노드 구성
[master]
API서버
- 사용자의 kubectl 요청 검수 및 수행
- etcd, 스케줄러, 워커노드의 kubelet과 통신하며 전반적 클러스터 운영
etcd
- 노드, 파드 등 모든 정보 저장
스케줄러
- etcd 정보를 기반으로 파드를 실행할 워커노드 선정
컨트롤러
- 파드의 개수 보장
[워커노드]
kubelet 
- kubelet은 데몬
- kubelet 안에있는 cAdvisor가 워커노드 및 컨테이너 정보를 모니터링해서 Master의 etcd에 전송
- kubelet은 API가 요청한 컨테이너 실행 명령을 docker 명령으로 변환하여 도커 플랫폼으로 전달
Container runtime
- docker와 같은 컨테이너 엔진
- 실제로 파드를 실행하는 플랫폼

#8 namespace
namespace는 클러스터를 논리적으로 구분해서 운영할 수 있는 기능.
기본 네임스페이스를 설정하려면, config안에 새로운 context를 생성해야함
네임스페이스 삭제 시 ns 내부에 모든 API리소스 삭제됨

#9 YAML
yaml은 사람이 쉽게 읽을 수 있는 데이터 직렬화 양식
들여쓰기를 기준으로 부모 자식 관계 형성
콜론을 기준으로 key-value 형성
- 를 기준으로 여러 개채 배열
top-down 방식 아니고 전체 내용 API 서버가 확인
API 오브젝트는 특정 API 리소스의 인스턴스

#10 pod
쿠버네티스에서는 컨테이너를 파드라는 단위로 관리하며 하나의 파드에 1개 이상의 컨테이너가 포함됨.
멀티컨테이너 파드 내부에 컨테이너는 동일한 IP주소를 사용함. 따라서 웹서버가 동작중이지 않은 컨테이너 내부에서 웹서버 컨테이너 포트로 접속하면 IP주소가 동일하므로 웹페이지가 확인됨.

#11 pod
파드는 스케줄링 받기 전까지는 Pending 상태
master노드에 해당 노드를 구성하는 API 리소스가 파드 형태로 실행중임

#12 pod-livenessProbe
셀프힐링 기능이 컨테이너를 보장해주는 기능이며, 셀프 힐링 기능 안에 livenessProbe 기능
livenessProbe는 컨테이너가 정상적으로 실행되는지 자동으로 확인하는 기능
주기적으로 컨테이너의 응답을 확인하여 컨테이너 정상 수행 여부 확인
livenessProbe를 통해 앱 관리자가 수동으로 앱 파악할 필요 없이, 쿠버네티스 클러스터가 자동으로 에러 컨테이너 관리해줌.
livenessProbe는 httpGet, tcpSocket, exec 3가지 검사를 지원. 
	- 웹서버의 경우 해당 포트에 HTTP Get 요청을 통해 응답이 200으로 반환되는지 확인. 연속 3번 오류 반환 시 컨테이너 삭제. Hub에서 컨테이너 새로 실행.(Restart)
	- 지정된 포트에 TCP 연결을 시도. 연속 3번 연결 불가 시 컨테이너 삭제 후 새로운 컨테이너 실행.(Restart)
	- 컨테이너 안에 데이터 유무를 확인하기 위해 exec을 통해 컨테이너 내부에 명령어를 실행. 
livenessProbe는 파드가 아닌 컨테이너를 재실행하므로 IP주소는 동일함.
파드 yaml파일에 containers아래 linvenessProbe 정의 추가
	- delay=0, 파드가 running 후 바로 검사
	- timeout=1s, 응답까지 1초 대기
	- period=10s, 검사 성공 및 실패에 대해 10초 주기로 계속 검사
	- success=1, 1번 성공 시 성공으로 간주
	- failure=3, 3번 연속 실패 시 실패로 간주
livenessProbe로 에러 발생 시 컨테이너 Killing 후 이미지 다시 Pulling, Create, Start. 그러면 RESTARTS 횟수 늘어남.

#13 pause container
파드 메인 컨테이너 실행 전에 미리 실행시키는 컨테이너. 즉, 메인 컨테이너의 전제조건이나 환경을 구성해주기 위한 컨테이너.
pause 컨테이너는 파드 생성 시 항상 생성되며 파드의 IP, 호스트네임, 네트워크 등 인프라를 구성해줌.
pause 컨테이너는 파드의 컨테이너 현황에는 확인되지 않음.

#14 static pod
static 파드는 API 서버에 요청을 보내지 않음.
각 노드의 kubelet static 파드 디렉토리에 yaml 파일 생성하면 파드가 생성됨
/etc/kubernetes/manifests 가 일반적으로 static 파드 디렉토리임
cat /var/lib/kubelet/config.yaml | grep -i staticpod -> static 파드 디렉토리 추출
master에서 확인하면 파드 이름 + 노드 이름으로 파드 생성됨.
kubectl delete pod 로 삭제해도 다시 실행되며, 해당 yaml 파일 삭제해야함
master에서는 etcd, apiserver,controller, scheduler, kubelet 이 정적 파드로 실행중임

#15 pod 컴퓨팅 리소스 할당
파드에 컴퓨팅 리소스 할당하기.
스케줄러가 워커노드의 하드웨어 리소스를 고려해서 파드를 배치
파드의 리소스 Request, Limit 설정 가능
Request는 이정도 컴퓨팅 자원이 있는 노드에 파드 배치 요청하는 것
메모리 : MB -> Mi
CPU : 1(Core) = 1000m
Limit만 설정해도 Request도 같이 설정됨 (describe로 확인)
워커노드 사양을 초과하는 리소스 요청 시 파드 Pending 상태로 유지됨
spec:
  containers:
  - name: nginx-container
    image: nginx:1.14
    ports:
    - containerPort: 80
      protocol: TCP
    resources:
      requests:
        cpu: 500m
        memory: 500Mi
      limits:
        cpu: 600m
        memory: 1000Mi

#16 파드 환경변수 설정
파드의 yaml 파일에 env를 추가해서 파드 실행 시 해당 컨테이너에 환경변수 추가 및 변경 가능
기존 환경변수는 변경되고, 신규 환경변수면 추가됨
파드 구성 패턴 종류
1. 사이드카: 하나의 컨테이너가 데이터를 생성해서 다른 컨테이너에 전송하여 처리하는 패턴
2. 어댑터 : 외부의 데이터를 중간 컨테이너가 받아서 UI 컨테이너에게 전송하여 사용자가 UI 컨테이너로 접속해 컨텐츠 확인하는 패턴
3. 앰버서더: 사용자 데이터 및 트래픽을 하나의 컨테이너가 받아서 다른 컨테이너에게 전송하면 다른 컨테이너가 내부의 엔드포인트로 전송하는 패턴

#17 컨트롤러, ReplicationController
총 7가지의 컨트롤러
쿠버네티스 API로 제공되는 컨트롤러 7가지.
컨트롤러란 "파드 개수 보장"
컨트롤플레인의 구성요소
사용자요청 -> API -> etcd -> API -> scheduler -> API -> controller -> API -> worker kubelet -> 파드 생성
ReplicationController
selector의 key-value 의 라벨을 가진 파드 개수를 replicas로 보장해주며, 신규로 생성해야할 시 template을 통해 생성
replicationController로 생성한 파드는 rc 이름 + 해시값 으로 이름 지어짐
rc는 특정 라벨의 파드 갯수를 유지해주는데, 정해진 파드 수를 초과할 수 없음.
rc를 edit으로 편집하자마자 해당 라벨의 파드 스케일아웃됨. 또는 스케일아웃 커맨드로도 가능
rc를 edit로 템플릿 컨테이너 이미지 버전 업그레이드하고 기존 파드 삭제하면 신규 파드의 버전이 업그레이드 됨. 다운타임 없이 롤링 업데이트 가능.

#18 Replicaset
ReplicationController와 동일한데 셀렉터가 풍부함
matchLabels & matchExperssions 이며, In은 value가 포함되는 파드 / NotIn은 value가 포함되지 않는 파드 / Exists는 value가 존재하면되며 / DoesNotExists는 value가 존재하지 않으면됨
ReplicationController, ReplicasetController는 앱 종류 상관 없이 라벨로만 파드 개수 유지

#19 Deployment
RS를 제어해주는 부모 역할
DP -> RS -> Pod 순으로 제어
롤링업데이트, 롤링백 지원하기 위함
deploy-nginx-bd76d5967-djvll 
    [deploy]    [replicaset]    [pod]
revisionHistory로 롤링업데이트 이력 숫자 정할 수 있음
maxSurge : replicas 기준으로 업데이트 시 동시 실행할 수 있는 파드 수 백분율
maxUnavailable: Terminate되는 파드 수 조정
kubernetes.io/change-cause: version 1.15 을 통해 롤링업데이트 history를 깔끔하게 정리 가능
deployment를 통해 롤링 업데이트 시 replicaset이 새롭게 생성되어 파드 내 컨테이너 버전이 새롭게 생성되는 것.

#20 Daemonset
워커노드 당 1개의 파드를 보장해주는 컨트롤러
워커노드 당 1개의 파드 보장하므로 replicas 없음
노드 로그 에이전트 같은 프로그램에 사용
롤링 업데이트도 가능

#21 Statefulset
파드의 이름을 보장해주는 컨트롤러
replicas를 통해 파드 개수를 보장
metadata.name으로 해당 파드의 이름 보장
파드 이름은 순서대로 name-0, name-1, name-2 형식
롤링업데이트 및 롤백 가능

[command]
kubectl explain pod [해당 API 리소스 정보 확인]

kubectl get node [노드 정보 확인]
kubectl get nodes -o wide [모든 노트 상태, 버전, IP주소, OS]
kubectl describe node master [master 노드 정보 자세히 확인]

kubectl get pod [클러스터 내 실행중인 파드 확인]
kubectl get pods -o wide [파드 정보 조금 자세히 확인]
kubectl get pod mainui-5886756f68-2f8nf -o wide [mainui-588... 파드 정보 확인]
kubectl get pod webserver -o yaml [webserver 파드 정보 yaml 형식으로 확인]
kubectl get pod webserver -o json [webserver 파드 정보 json 형식으로 확인]
watch kubectl get pod -o wide [2초 주기로 클러스터 내 파드 정보 확인]
kubectl describe pod webserver [webserver파드 정보 자세히 확인]
kubectl describe pod web1 | grep -i container [web1 파드 정보 중 container 문자열 부분 출력]

kubectl get deployments [클러스터 내 실행 중인 deployment 정보 확인]
kubectl describe deploy mainui [mainui deployment 정보 자세히 확인]

kubectl run webserver --image=nginx:1.14 --port 80 [nginx 컨테이너 이미지, 80번 컨테이너 포트의 파드 생성 및 실행]
kubectl run webserver --image=nginx:1.14 --port 80 --dry-run [webserver 파드 생성 여부 테스트]
kubectl run webserver --image=nginx:1.14 --port 80 --dry-run -o yaml [webserver 파드 yaml 형식으로 출력]
kubectl run webserver --image=nginx:1.14 --port 80 --dry-run -o yaml > webserver-pod.yaml [webserver 파드 yaml 형식으로 저장]

kubectl create deployment mainui --image=httpd --replicas=3 [mainui 이름의 deployment를 통해 아파치 httpd 웹서버 파드 3개 생성]
kubectl create -f webserver-pod.yaml [yaml 파일 기반으로 파드 생성]

kubectl edit deploy mainui [mainui deployment 수정을 위해 vi에디터 오픈]
kubectl delete pod webserver [webserver 파드 제거]
kubectl delete pod 파드명 --grace-period=0 --force [파드 강제 삭제]
kubectl delete deploy mainui [mainui deployment 제거]

kubectl port-forward webserver 8080:80 [로컬시스템 8080 포트로 접속 시 webserver 컨테이너의 80포트로 접속시키는 포트포워딩]
kubectl api-resources [api 리소스 약어 확인]
kubectl --help [해당 api 리소스 커맨드 도움말 확인]
kubectl exec webserver -it -- /bin/bash [webserver 파드로 진입]
	-> cd /usr/share/nginx/html/ [nginx 컨테이너의 index.html 파일이 있는 디렉토리로 이동]
	-> echo "SMLEE web" > index.html [index.html 파일 수정]

kubectl exec multipod -c nginx-continaer -it /bin/bash [multipod 파드내 nginx-container 컨테이너 내부로 진입]
kubectl logs webserver [webserver 파드 로그 정보 확인]
kubectl logs multipod -c nginx-container [multipod 파드내 nginx-container 컨테이너 접속 로그 확인]

kubectl get ns [클러스터 내 namespace 정보 확인]
kubectl get pod -n default [default namespace 내 파드 확인] 
kubectl get pod --all-namespace [모든 namespace 내 파드 확인]

kubectl create namespace blue [blue namespace 생성]
kubectl create ns orange --dry-run -o yaml > orange-ns.yaml [orange namespace에 대한 yaml 파일 생성]
kubectl delete pod mypod -n orange [orange namespace에서 mypod 파드 삭제]
kubectl delete ns blue [blue namespace 삭제]

kubectl config view [클러스터 config 정보 확인]
kubectl config set-context blue@kubernetes --cluster=kubernetes --user=kubernetes-admin --namespace=blue [config에 blue namespace 컨텍스트 생성]
kubectl config current context [현재 사용 중인 컨텍스트 확인]
kubectl config use-context blue@kubernetes [기본 컨텍스트 설정]

kubectl create -f nginx.yaml [yaml 파일로 부터 API 리소스 생성]
kubectl create -f nginx.yaml -n blue [yaml 파일로 부터 API 리소스를 blue namespace에 생성]

kubectl get pod -o wide --watch [변경사항 2초 주기로 라인별로 보여줌]
kubectl get pod --show-labels [파드의 라벨 정보 확인]

kubectl describe rc rc-nginx [rc-nginx의 replicationcontroller 세부 정보 확인]
kubectl scale rc rc-nginx --replicas=2 [rc-nginx의 replicationcontroller 레플리카수 확장]
kubectl edit rc rc-nginx [rc-nginx의 replicationcontroller 편집모드]
kubectl delete rc --all [현재 ns의 모든 replicationcontroller 삭제]

kubectl get rs -o wide [replicaset 정보 확인]
kubectl scale rs rs-nginx --replicas=2 [replicaset의 replicas 수 조절]
kubectl delete rs rs-nginx [replicas 삭제]

kubectl get deploy,rs,pod [deployment, replicaset, pod 정보 한번에 확인]
kubectl rollout history deploy app-deploy [app-deploy 라는 deployment에 대한 롤링업데이트 기록 확인]
kubectl set image deploy app-deploy web=nginx:1.15 --record [app-deploy라는 deployment의 컨테이너 롤링업데이트]
kubectl set image deploy app-deploy web=nginx:1.16 --record [app-deploy라는 deployment의 컨테이너 롤링업데이트]
kubectl set image deploy app-deploy web=nginx:1.17 --record [app-deploy라는 deployment의 컨테이너 롤링업데이트]
kubectl set image deploy app-deploy web=nginx:1.18 --record [app-deploy라는 deployment의 컨테이너 롤링업데이트]

kubectl rollout status deploy app-deploy [app-deploy 라는 deployment의 롤링업데이트 실시간 현황 확인]
kubectl rollout pause deploy app-deploy [app-deploy 라는 deployment의 롤링업데이트 일시 중지]
kubectl rollout resume deploy app-deploy [app-deploy 라는 deployment의 롤링업데이트 재개]
kubectl rollout history deploy app-deploy [app-deploy 라는 deployment의 롤링업데이트 기록 확인]

kubectl rollout undo deploy app-deploy --to-revision=3 [app-deploy 라는 deployment 롤링업데이트 history에서 3번으로 롤백]
kubectl rollout undo deploy app-deploy [app-deploy 라는 deployment 이전 버전으로 롤백]

kubectl apply -f deploy-exam.yaml [vi 편집기로 deploy 버전 수정 후 apply하면 롤링업데이트되며, history에도 기록됨]

kubeadm token list [join 토큰 확인]
kubeadm token create --print-join-command --ttl 1h [유효기간 1시간 join 토근 생성]
kubectl edit ds daemonset-nginx [daemonset vi 에디터로 수정 및 롤링업데이트]
kubectl rollout undo ds daemonset-nginx [daemonset 롤백]

kubeadm reset [join 기록 및 구성 삭제]
kubeadm join 192.168.137.100:6443 --token ... --discovery-token-ca-cert-hash ... [master 재 join]

kubectl get statefulset [해당 클러스터에서 실행중인 statefulset 확인]
kubectl scale statefulset sf-nginx --replicas=4 [statefulset으로 실행중인 파드 scale out]
kubectl edit statefulset sf-nginx [statefulset vi 편집모드로 롤링업데이트 가능]
kubectl rollout undo statefulset sf-nginx [sf-nginx라는 statefulset 롤백]
kubectl rollout history statefulset sf-nginx [sf-nginx라는 statefulset 롤링업데이트 기록 확인]
